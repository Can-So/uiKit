image: node:8.4.0
# This ensures we do a full clone on each build which prevents issues when cross referencing
# changesets and releases
clone:
  depth: full
options:
  size: 2x

pipelines:
  branches:
    master:
      - step:
          script:
            # Note: in master, this script will rebase you onto latest origin/master
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - (cd build/ci-scripts && yarn stop-if-older-build)
            - yarn build
            - node build/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
            # Disabled until we get rid of the race condition in Landkid
            # - yarn lint
            # - yarn typecheck
            # - yarn test
            # Disabled until we find the source of the flakeyness
            # - yarn test:browser:browserstack
            - yarn release
            - (cd build/ci-scripts && yarn restart-stopped-build)
          caches:
            - node

  default:
    - parallel:
        - step:
            name: Building dists
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - yarn build
              - node build/ci-scripts/run.if.package.changed.js @atlaskit/editor-mobile-bridge -- yarn build:editor-mobile-bridge
            caches:
              - node
        - step:
            name: Lint + Typecheck
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - node build/ci-scripts/run.tool.if.changed.js eslint -- yarn lint:eslint
              - node build/ci-scripts/run.tool.if.changed.js tslint -- yarn lint:tslint
              - node build/ci-scripts/run.tool.if.changed.js stylelint -- yarn lint:stylelint
              - node build/ci-scripts/run.tool.if.changed.js flow -- yarn typecheck:flow
              - node build/ci-scripts/run.tool.if.changed.js typescript -- yarn typecheck:typescript
            caches:
              - node
        - step:
            name: Testing
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - yarn test:changed
              - node build/ci-scripts/run.tool.if.changed.js browserstack -- yarn test:browser:browserstack
            caches:
              - node
        - step:
            name: Building website
            script:
              - source ./build-setup.sh
              - bolt install --pure-lockfile
              - set -o pipefail && (cd website && yarn deploy-staging:no-minimize) | tee netlify-build.txt
              - echo "Uploading netlify build link to s3 so that we can fetch at the end..."
              - node build/ci-scripts/upload.build.artefact.for.commit.js netlify-build.txt
            caches:
              - node
    - step:
        name: Sending Website Build Url
        script:
          - (cd build/utils && yarn install) # needed for npm-run when updating status
          - cd build/ci-scripts
          - yarn install
          - node download.build.artefact.for.commit.js netlify-build.txt
          - node update.build.status.with.netlify.link.js


  custom: # Pipelines that can be scheduled or triggered manually

    # This should only be called by a scheduled build
    build-website-production:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - (cd website && yarn deploy)
          caches:
            - node

    # This will run with the webdriver tests
    build-webdriver:
    - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn test:build:webdriver:browserstack
          caches:
            - node

    # This will run essentially the branch builds, but without any optimizations and should be manually
    # run in any potentially risky builds
    run-full-suite:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn build
            - yarn lint
            - yarn typecheck
            - yarn test
            - yarn test:browser:browserstack
            - (cd website && yarn deploy-staging:no-minimize)
    # We deliberately don't use the cache here as well


    landkid:
      - parallel:
          - step:
              name: Building
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - yarn build

          - step:
              name: Linting
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - yarn lint

          - step:
              name: Typechecking
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - yarn typecheck
          # Rest of the steps are jest tests. We no longer use the $BITBUCKET_PARALLEL_STEP_COUNT and $BITBUCKET_PARALLEL_STEP
          # variables as they mean the jest steps need to be in their own parallel block, so we just hardcode them here
          - step:
              name: Running Jest 1 of 4 chunks
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - STEPS="4" STEP_IDX="0" PARALLELIZE_TESTS="$(yarn --silent jest --listTests)" yarn jest --runInBand
          - step:
              name: Running Jest 2 of 4 chunks
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - STEPS="4" STEP_IDX="1" PARALLELIZE_TESTS="$(yarn --silent jest --listTests)" yarn jest --runInBand
          - step:
              name: Running Jest 3 of 4 chunks
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - STEPS="4" STEP_IDX="2" PARALLELIZE_TESTS="$(yarn --silent jest --listTests)" yarn jest --runInBand
          - step:
              name: Running Jest 4 of 4 chunks
              script:
                - source ./build-setup.sh
                - git merge master --no-edit
                - bolt install --pure-lockfile
                - STEPS="4" STEP_IDX="3" PARALLELIZE_TESTS="$(yarn --silent jest --listTests)" yarn jest --runInBand

    # This build should only be run on the master branch, once per day.
    # It manually clears the cache and runs a very quick install node_modules
    # We split into two steps so that one can clear the cache so that the second one starts with no cache
    # (Which causes it to upload when it's finished).
    reseed-pipelines-cache:
      - step:
          name: Clearing old cache
          script:
            - ([[ "$BITBUCKET_BRANCH" == "master" ]]) || (echo "This build should only be run on master" && exit 1)
            - cd build/ci-scripts
            - yarn install --pure-lockfile
            - node clear.pipelines.node.cache.js
      - step:
          name: Creating new cache
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            # we re-clear the cache here in case any other builds have managed to start and finish in between us starting
            # (our build will only upload a cache if there is none when the build finishes)
            - node build/ci-scripts/clear.pipelines.node.cache.js
          caches:
            - node
