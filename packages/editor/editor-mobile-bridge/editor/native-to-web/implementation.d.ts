import { MentionPluginState, TextFormattingState, EditorActions, CustomMediaPicker, BlockTypeState, ListsState, StatusState } from '@findable/editor-core';
import { EditorView } from 'prosemirror-view';
import { JSONTransformer } from '@findable/editor-json-transformer';
import { Color as StatusColor } from '@findable/status';
import NativeToWebBridge from './bridge';
import WebBridge from '../../web-bridge';
import { ProseMirrorDOMChange } from '../../types';
export default class WebBridgeImpl extends WebBridge implements NativeToWebBridge {
    textFormatBridgeState: TextFormattingState | null;
    statusBridgeState: StatusState | null;
    blockFormatBridgeState: BlockTypeState | null;
    listBridgeState: ListsState | null;
    mentionsPluginState: MentionPluginState | null;
    editorView: EditorView & ProseMirrorDOMChange | null;
    transformer: JSONTransformer;
    editorActions: EditorActions;
    mediaPicker: CustomMediaPicker | undefined;
    mediaMap: Map<string, Function>;
    onBoldClicked(): void;
    onItalicClicked(): void;
    onUnderlineClicked(): void;
    onCodeClicked(): void;
    onStrikeClicked(): void;
    onSuperClicked(): void;
    onSubClicked(): void;
    onMentionSelect(mention: string): void;
    onMentionPickerResult(result: string): void;
    onMentionPickerDismissed(): void;
    onStatusUpdate(text: string, color: StatusColor, uuid: string): void;
    onStatusPickerDismissed(): void;
    setContent(content: string): void;
    getContent(): string;
    setTextFormattingStateAndSubscribe(state: TextFormattingState): void;
    setTextColor(color: string): void;
    onMediaPicked(eventName: string, mediaPayload: string): void;
    onPromiseResolved(uuid: string, payload: string): void;
    onPromiseRejected(uuid: string): void;
    onBlockSelected(blockType: string): void;
    onOrderedListSelected(): void;
    onBulletListSelected(): void;
    onIndentList(): void;
    onOutdentList(): void;
    onLinkUpdate(text: string, url: string): void;
    insertBlockType(type: string): void;
    insertTypeAheadItem(type: 'mention' | 'emoji', payload: string): void;
    setFocus(force: boolean): boolean;
    flushDOM(): boolean;
    getRootElement(): HTMLElement | null;
}
