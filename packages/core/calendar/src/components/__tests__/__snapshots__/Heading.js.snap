// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render 1`] = `
.c1 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  background: none;
  border-radius: 3px;
  border-width: 0;
  box-sizing: border-box;
  color: #505F79 !important;
  cursor: default;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: inherit;
  font-style: normal;
  height: auto;
  line-height: inherit;
  margin: 0;
  max-width: 100%;
  outline: none !important;
  padding: 0;
  pointer-events: 'auto';
  text-align: center;
  text-decoration: none;
  -webkit-transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  transition: background 0.1s ease-out,box-shadow 0.15s cubic-bezier(0.47,0.03,0.49,1.38);
  -webkit-transition-duration: 0.1s,0.15s;
  transition-duration: 0.1s,0.15s;
  vertical-align: baseline;
  white-space: nowrap;
  width: auto;
}

.c1::-moz-focus-inner {
  border: 0;
  margin: 0;
  padding: 0;
}

.c2 {
  height: 24px;
  width: 24px;
  color: #97A0AF;
  display: inline-block;
  fill: #FFFFFF;
  line-height: 1;
}

.c2 > svg {
  height: 24px;
  width: 24px;
  max-height: 100%;
  max-width: 100%;
  overflow: hidden;
  vertical-align: bottom;
}

.c2 stop {
  stop-color: currentColor;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 4px 0 8px 0;
  font-weight: bold;
}

.c3 {
  -webkit-flex-basis: 100%;
  -ms-flex-preferred-size: 100%;
  flex-basis: 100%;
  text-align: center;
}

<PredefinedHeading>
  <Component
    month={1}
    year={2000}
  >
    <styled.div
      aria-hidden="true"
    >
      <div
        aria-hidden="true"
        className="c0"
      >
        <div>
          <Component>
            <WithAnalyticsContext(WithAnalyticsEvents(WithDeprecationWarnings(Button)))
              analyticsContext={Object {}}
              appearance="subtle"
              spacing="none"
              tabIndex={-1}
            >
              <AnalyticsContext
                data={
                  Object {
                    "component": "button",
                    "package": "@atlaskit/button",
                    "version": "6.6.3",
                  }
                }
              >
                <WithAnalyticsEvents(WithDeprecationWarnings(Button))
                  appearance="subtle"
                  spacing="none"
                  tabIndex={-1}
                >
                  <WithDeprecationWarnings(Button)
                    appearance="subtle"
                    createAnalyticsEvent={[Function]}
                    onClick={[Function]}
                    spacing="none"
                    tabIndex={-1}
                  >
                    <Button
                      appearance="subtle"
                      createAnalyticsEvent={[Function]}
                      isDisabled={false}
                      isSelected={false}
                      onClick={[Function]}
                      shouldFitContainer={false}
                      spacing="none"
                      tabIndex={-1}
                      type="button"
                    >
                      <StyledButton
                        appearance="subtle"
                        disabled={false}
                        fit={false}
                        isActive={false}
                        isFocus={false}
                        isHover={false}
                        isSelected={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        spacing="none"
                        tabIndex={-1}
                        type="button"
                      >
                        <button
                          className="c1"
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          spacing="none"
                          tabIndex={-1}
                          type="button"
                        >
                          <ButtonWrapper
                            fit={false}
                            onClick={[Function]}
                          >
                            <span
                              onClick={[Function]}
                              style={
                                Object {
                                  "alignSelf": "center",
                                  "display": "inline-flex",
                                  "flexWrap": "nowrap",
                                  "maxWidth": "100%",
                                }
                              }
                            >
                              <ButtonContent
                                followsIcon={false}
                                spacing="none"
                              >
                                <span
                                  style={
                                    Object {
                                      "alignItems": "center",
                                      "alignSelf": "center",
                                      "flex": "1 1 auto",
                                      "margin": 0,
                                      "maxWidth": "100%",
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                >
                                  <ArrowLeftIcon
                                    label="Last month"
                                    primaryColor="#97A0AF"
                                    size="medium"
                                  >
                                    <Icon
                                      dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" focusable=\\"false\\" role=\\"presentation\\"><path d=\\"M8.414 11.5H18a1 1 0 0 1 0 2H8.414l3.793 3.793a1 1 0 0 1-1.414 1.414l-5.5-5.5a1 1 0 0 1 0-1.414l5.5-5.5a1 1 0 0 1 1.414 1.414L8.414 11.5z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>"
                                      label="Last month"
                                      onClick={[Function]}
                                      primaryColor="#97A0AF"
                                      size="medium"
                                    >
                                      <styled.span
                                        aria-label="Last month"
                                        dangerouslySetInnerHTML={
                                          Object {
                                            "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" focusable=\\"false\\" role=\\"presentation\\"><path d=\\"M8.414 11.5H18a1 1 0 0 1 0 2H8.414l3.793 3.793a1 1 0 0 1-1.414 1.414l-5.5-5.5a1 1 0 0 1 0-1.414l5.5-5.5a1 1 0 0 1 1.414 1.414L8.414 11.5z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                          }
                                        }
                                        onClick={[Function]}
                                        primaryColor="#97A0AF"
                                        size="medium"
                                      >
                                        <span
                                          aria-label="Last month"
                                          className="c2"
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" focusable=\\"false\\" role=\\"presentation\\"><path d=\\"M8.414 11.5H18a1 1 0 0 1 0 2H8.414l3.793 3.793a1 1 0 0 1-1.414 1.414l-5.5-5.5a1 1 0 0 1 0-1.414l5.5-5.5a1 1 0 0 1 1.414 1.414L8.414 11.5z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                            }
                                          }
                                          onClick={[Function]}
                                          size="medium"
                                        />
                                      </styled.span>
                                    </Icon>
                                  </ArrowLeftIcon>
                                </span>
                              </ButtonContent>
                            </span>
                          </ButtonWrapper>
                        </button>
                      </StyledButton>
                    </Button>
                  </WithDeprecationWarnings(Button)>
                </WithAnalyticsEvents(WithDeprecationWarnings(Button))>
              </AnalyticsContext>
            </WithAnalyticsContext(WithAnalyticsEvents(WithDeprecationWarnings(Button)))>
          </Component>
        </div>
        <styled.div>
          <div
            className="c3"
          >
            January 2000
          </div>
        </styled.div>
        <div>
          <Component>
            <WithAnalyticsContext(WithAnalyticsEvents(WithDeprecationWarnings(Button)))
              analyticsContext={Object {}}
              appearance="subtle"
              spacing="none"
              tabIndex={-1}
            >
              <AnalyticsContext
                data={
                  Object {
                    "component": "button",
                    "package": "@atlaskit/button",
                    "version": "6.6.3",
                  }
                }
              >
                <WithAnalyticsEvents(WithDeprecationWarnings(Button))
                  appearance="subtle"
                  spacing="none"
                  tabIndex={-1}
                >
                  <WithDeprecationWarnings(Button)
                    appearance="subtle"
                    createAnalyticsEvent={[Function]}
                    onClick={[Function]}
                    spacing="none"
                    tabIndex={-1}
                  >
                    <Button
                      appearance="subtle"
                      createAnalyticsEvent={[Function]}
                      isDisabled={false}
                      isSelected={false}
                      onClick={[Function]}
                      shouldFitContainer={false}
                      spacing="none"
                      tabIndex={-1}
                      type="button"
                    >
                      <StyledButton
                        appearance="subtle"
                        disabled={false}
                        fit={false}
                        isActive={false}
                        isFocus={false}
                        isHover={false}
                        isSelected={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        spacing="none"
                        tabIndex={-1}
                        type="button"
                      >
                        <button
                          className="c1"
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          spacing="none"
                          tabIndex={-1}
                          type="button"
                        >
                          <ButtonWrapper
                            fit={false}
                            onClick={[Function]}
                          >
                            <span
                              onClick={[Function]}
                              style={
                                Object {
                                  "alignSelf": "center",
                                  "display": "inline-flex",
                                  "flexWrap": "nowrap",
                                  "maxWidth": "100%",
                                }
                              }
                            >
                              <ButtonContent
                                followsIcon={false}
                                spacing="none"
                              >
                                <span
                                  style={
                                    Object {
                                      "alignItems": "center",
                                      "alignSelf": "center",
                                      "flex": "1 1 auto",
                                      "margin": 0,
                                      "maxWidth": "100%",
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                >
                                  <ArrowRightIcon
                                    label="Next month"
                                    primaryColor="#97A0AF"
                                    size="medium"
                                  >
                                    <Icon
                                      dangerouslySetGlyph="<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" focusable=\\"false\\" role=\\"presentation\\"><path d=\\"M11.793 5.793a.999.999 0 0 0 0 1.414L15.586 11H6a1 1 0 0 0 0 2h9.586l-3.793 3.793a.999.999 0 0 0 0 1.414c.39.39 1.024.39 1.415 0l5.499-5.5a.997.997 0 0 0 .293-.679v-.057a.996.996 0 0 0-.293-.678l-5.499-5.5a1 1 0 0 0-1.415 0z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>"
                                      label="Next month"
                                      onClick={[Function]}
                                      primaryColor="#97A0AF"
                                      size="medium"
                                    >
                                      <styled.span
                                        aria-label="Next month"
                                        dangerouslySetInnerHTML={
                                          Object {
                                            "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" focusable=\\"false\\" role=\\"presentation\\"><path d=\\"M11.793 5.793a.999.999 0 0 0 0 1.414L15.586 11H6a1 1 0 0 0 0 2h9.586l-3.793 3.793a.999.999 0 0 0 0 1.414c.39.39 1.024.39 1.415 0l5.499-5.5a.997.997 0 0 0 .293-.679v-.057a.996.996 0 0 0-.293-.678l-5.499-5.5a1 1 0 0 0-1.415 0z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                          }
                                        }
                                        onClick={[Function]}
                                        primaryColor="#97A0AF"
                                        size="medium"
                                      >
                                        <span
                                          aria-label="Next month"
                                          className="c2"
                                          dangerouslySetInnerHTML={
                                            Object {
                                              "__html": "<svg width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" focusable=\\"false\\" role=\\"presentation\\"><path d=\\"M11.793 5.793a.999.999 0 0 0 0 1.414L15.586 11H6a1 1 0 0 0 0 2h9.586l-3.793 3.793a.999.999 0 0 0 0 1.414c.39.39 1.024.39 1.415 0l5.499-5.5a.997.997 0 0 0 .293-.679v-.057a.996.996 0 0 0-.293-.678l-5.499-5.5a1 1 0 0 0-1.415 0z\\" fill=\\"currentColor\\" fill-rule=\\"evenodd\\"/></svg>",
                                            }
                                          }
                                          onClick={[Function]}
                                          size="medium"
                                        />
                                      </styled.span>
                                    </Icon>
                                  </ArrowRightIcon>
                                </span>
                              </ButtonContent>
                            </span>
                          </ButtonWrapper>
                        </button>
                      </StyledButton>
                    </Button>
                  </WithDeprecationWarnings(Button)>
                </WithAnalyticsEvents(WithDeprecationWarnings(Button))>
              </AnalyticsContext>
            </WithAnalyticsContext(WithAnalyticsEvents(WithDeprecationWarnings(Button)))>
          </Component>
        </div>
      </div>
    </styled.div>
  </Component>
</PredefinedHeading>
`;
