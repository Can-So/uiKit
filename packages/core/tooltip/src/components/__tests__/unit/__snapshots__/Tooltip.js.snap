// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tooltip render should render custom tooltip when component prop passed in 1`] = `
.c0 {
  background: pink;
}

<withContextFromProps>
  <Tip
    component={[Function]}
    coordinates={
      Object {
        "left": 50,
        "top": 100,
      }
    }
    immediatelyHide={false}
    immediatelyShow={true}
    mousePosition="bottom"
    position="top"
  >
    <Slide
      component={[Function]}
      immediatelyHide={false}
      immediatelyShow={true}
      mousePosition="bottom"
      position="top"
      style={
        Object {
          "left": 50,
          "top": 100,
        }
      }
    >
      <Animation
        component={[Function]}
        style={
          Object {
            "left": 50,
            "top": 100,
          }
        }
        styleDefault={
          Object {
            "transform": "translate3d(0, 0, 0)",
            "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
          }
        }
        timeout={
          Object {
            "enter": 1,
            "exit": 120,
          }
        }
        transition={
          Object {
            "entered": Object {
              "opacity": 1,
              "transform": "translate3d(0, 0, 0)",
            },
            "entering": Object {
              "opacity": 0,
              "transform": "translate3d(0px, 8px, 0)",
            },
            "exiting": Object {
              "opacity": 0,
              "transition": "opacity 120ms linear",
            },
          }
        }
      >
        <MockTransition
          appear={true}
          mountOnEnter={true}
          timeout={
            Object {
              "enter": 1,
              "exit": 120,
            }
          }
          unmountOnExit={true}
        >
          <styled.span
            style={
              Object {
                "left": 50,
                "top": 100,
                "transform": "translate3d(0, 0, 0)",
                "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
              }
            }
          >
            <span
              className="c0"
              style={
                Object {
                  "left": 50,
                  "top": 100,
                  "transform": "translate3d(0, 0, 0)",
                  "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
                }
              }
            >
              Tooltip content
            </span>
          </styled.span>
        </MockTransition>
      </Animation>
    </Slide>
  </Tip>
</withContextFromProps>
`;

exports[`Tooltip render should render target without any extra styles 1`] = `
<div
  onClick={[Function]}
  onMouseMove={[Function]}
  onMouseOut={[Function]}
  onMouseOver={[Function]}
>
  <div>
    foo
  </div>
</div>
`;

exports[`Tooltip render should render tooltip with appropriate styles 1`] = `
.c1 {
  z-index: 800;
  pointer-events: none;
  position: fixed;
}

.c0 {
  background-color: #172B4D;
  border-radius: 3px;
  box-sizing: border-box;
  color: #FFFFFF;
  font-size: 12px;
  left: 0;
  line-height: 1.3;
  max-width: 240px;
  padding: 2px 6px;
  top: 0;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

<withContextFromProps>
  <Tip
    component={[Function]}
    coordinates={
      Object {
        "left": 50,
        "top": 100,
      }
    }
    immediatelyHide={false}
    immediatelyShow={true}
    mousePosition="bottom"
    position="top"
  >
    <Slide
      component={[Function]}
      immediatelyHide={false}
      immediatelyShow={true}
      mousePosition="bottom"
      position="top"
      style={
        Object {
          "left": 50,
          "top": 100,
        }
      }
    >
      <Animation
        component={[Function]}
        style={
          Object {
            "left": 50,
            "top": 100,
          }
        }
        styleDefault={
          Object {
            "transform": "translate3d(0, 0, 0)",
            "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
          }
        }
        timeout={
          Object {
            "enter": 1,
            "exit": 120,
          }
        }
        transition={
          Object {
            "entered": Object {
              "opacity": 1,
              "transform": "translate3d(0, 0, 0)",
            },
            "entering": Object {
              "opacity": 0,
              "transform": "translate3d(0px, 8px, 0)",
            },
            "exiting": Object {
              "opacity": 0,
              "transition": "opacity 120ms linear",
            },
          }
        }
      >
        <MockTransition
          appear={true}
          mountOnEnter={true}
          timeout={
            Object {
              "enter": 1,
              "exit": 120,
            }
          }
          unmountOnExit={true}
        >
          <Styled(styled.div)
            style={
              Object {
                "left": 50,
                "top": 100,
                "transform": "translate3d(0, 0, 0)",
                "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
              }
            }
          >
            <styled.div
              className="c0"
              style={
                Object {
                  "left": 50,
                  "top": 100,
                  "transform": "translate3d(0, 0, 0)",
                  "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
                }
              }
            >
              <div
                className="c0 c1"
                style={
                  Object {
                    "left": 50,
                    "top": 100,
                    "transform": "translate3d(0, 0, 0)",
                    "transition": "transform 1ms cubic-bezier(0.23, 1, 0.32, 1), opacity 1ms linear",
                  }
                }
              >
                Tooltip content
              </div>
            </styled.div>
          </Styled(styled.div)>
        </MockTransition>
      </Animation>
    </Slide>
  </Tip>
</withContextFromProps>
`;
