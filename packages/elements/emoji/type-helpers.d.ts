import { CategoryId } from './components/picker/categories';
import { EmojiDescription, EmojiDescriptionWithVariations, EmojiId, EmojiImageRepresentation, EmojiRepresentation, EmojiServiceRepresentation, EmojiVariationDescription, ImageRepresentation, MediaApiRepresentation, OptionalEmojiDescription, SpriteRepresentation, SpriteServiceRepresentation } from './types';
export declare const isSpriteServiceRepresentation: (rep: EmojiServiceRepresentation) => rep is SpriteServiceRepresentation;
export declare const isSpriteRepresentation: (rep: EmojiRepresentation) => rep is SpriteRepresentation;
export declare const isImageRepresentation: (rep: EmojiImageRepresentation | SpriteRepresentation | SpriteServiceRepresentation | ImageRepresentation | MediaApiRepresentation | undefined) => rep is ImageRepresentation;
export declare const isMediaRepresentation: (rep: EmojiImageRepresentation | SpriteRepresentation | ImageRepresentation | MediaApiRepresentation | undefined) => rep is MediaApiRepresentation;
export declare const isPromise: <T>(p: any) => p is Promise<T>;
export declare const isEmojiDescription: (possibleEmojiDescription: any) => possibleEmojiDescription is EmojiDescription;
export declare const isMediaEmoji: (emoji: EmojiDescription) => boolean;
export declare const hasDataURLImage: (rep: EmojiRepresentation) => boolean;
export declare const isLoadedMediaEmoji: (emoji: EmojiDescription) => boolean;
export declare const isEmojiDescriptionWithVariations: (emoji: OptionalEmojiDescription) => emoji is EmojiDescriptionWithVariations;
export declare const isEmojiVariationDescription: (object: any) => object is EmojiVariationDescription;
export declare const isMessagesKey: (key: string) => key is "deleteEmojiTitle" | "deleteEmojiDescription" | "deleteEmojiLabel" | "addCustomEmojiLabel" | "emojiPlaceholder" | "emojiNameAriaLabel" | "emojiChooseFileTitle" | "emojiChooseFileAriaLabel" | "emojiImageRequirements" | "emojiPreviewTitle" | "emojiPreview" | "addEmojiLabel" | "retryLabel" | "cancelLabel" | "searchLabel" | "categoriesSearchResults" | "frequentCategory" | "peopleCategory" | "natureCategory" | "foodsCategory" | "activityCategory" | "placesCategory" | "objectsCategory" | "symbolsCategory" | "flagsCategory" | "productivityCategory" | "userUploadsCustomCategory" | "allUploadsCustomCategory" | "deleteEmojiFailed" | "emojiInvalidImage" | "emojiUploadFailed" | "emojiImageTooBig";
export declare const toEmojiId: (emoji: EmojiDescription) => EmojiId;
export declare const toOptionalEmojiId: (emoji: OptionalEmojiDescription) => EmojiId | undefined;
export declare const isEmojiIdEqual: (l?: EmojiId | undefined, r?: EmojiId | undefined) => boolean | undefined;
export declare const containsEmojiId: (emojis: EmojiDescription[], emojiId: EmojiId | undefined) => boolean;
export declare const convertImageToMediaRepresentation: (rep: ImageRepresentation) => MediaApiRepresentation;
export declare const convertMediaToImageRepresentation: (rep: MediaApiRepresentation, newImagePath?: string | undefined) => ImageRepresentation;
export declare const convertMediaToImageEmoji: (emoji: EmojiDescription, newImagePath?: string | undefined, useAlt?: boolean | undefined) => EmojiDescription;
export declare const buildEmojiDescriptionWithAltRepresentation: (emoji: EmojiDescriptionWithVariations, altRepresentation?: EmojiRepresentation) => EmojiDescriptionWithVariations;
export declare const getCategoryId: (emoji: EmojiDescription) => CategoryId;
